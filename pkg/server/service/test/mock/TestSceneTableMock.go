// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/server/service/test/mock/SceneTableMock.go

// Package mock_mock is a generated GoMock package.
package mock

import (
	repository "prote-API/pkg/server/repository"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSceneTable is a mock of SceneTable interface
type MockSceneTable struct {
	ctrl     *gomock.Controller
	recorder *MockSceneTableMockRecorder
}

// MockSceneTableMockRecorder is the mock recorder for MockSceneTable
type MockSceneTableMockRecorder struct {
	mock *MockSceneTable
}

// NewMockSceneTable creates a new mock instance
func NewMockSceneTable(ctrl *gomock.Controller) *MockSceneTable {
	mock := &MockSceneTable{ctrl: ctrl}
	mock.recorder = &MockSceneTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSceneTable) EXPECT() *MockSceneTableMockRecorder {
	return m.recorder
}

// SelectRowsByName mocks base method
func (m *MockSceneTable) SelectRowsByName(name string) ([]repository.SceneRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectRowsByName", name)
	ret0, _ := ret[0].([]repository.SceneRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectRowsByName indicates an expected call of SelectRowsByName
func (mr *MockSceneTableMockRecorder) SelectRowsByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectRowsByName", reflect.TypeOf((*MockSceneTable)(nil).SelectRowsByName), name)
}
